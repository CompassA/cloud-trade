<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.study.trade.balance.mapper.BalanceDataMapper">
  <resultMap id="BaseResultMap" type="org.study.trade.balance.data.BalanceData">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="balance" jdbcType="DECIMAL" property="balance" />
    <result column="log_id" jdbcType="INTEGER" property="logId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, balance, log_id, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account_balance
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account_balance
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.study.trade.balance.data.BalanceData">
    <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account_balance (balance, log_id, create_time, 
      update_time)
    values (#{balance,jdbcType=DECIMAL}, #{logId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.study.trade.balance.data.BalanceData">
    <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account_balance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="balance != null">
        balance,
      </if>
      <if test="logId != null">
        log_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="logId != null">
        #{logId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.study.trade.balance.data.BalanceData">
    update account_balance
    <set>
      <if test="balance != null">
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="logId != null">
        log_id = #{logId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.study.trade.balance.data.BalanceData">
    update account_balance
    set balance = #{balance,jdbcType=DECIMAL},
      log_id = #{logId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <update id="reduce">
    UPDATE `account_balance`
    <set>
      `balance` = `balance` - #{amount},
      `log_id` = #{newLogId}
    </set>
    <where>
      `user_id` = #{userId} AND
      `log_id` = #{curLogId}
    </where>
  </update>

</mapper>